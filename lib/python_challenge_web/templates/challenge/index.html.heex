<script src="https://code.jquery.com/jquery-latest.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/jquery.terminal.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/jquery.terminal/css/jquery.terminal.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js"></script>
<link href="https://cdn.jsdelivr.net/npm/jquery.terminal@2.33.1/css/jquery.terminal.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/prismjs@1.28.0/themes/prism.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.28.0/prism.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.28.0/components/prism-python.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/prism.js"></script>
<style>
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
    }
    #container {
        display: flex;
        flex-direction: row;
        height: 100%;
        margin-top: 80px;
    }

    #question-panel {
        background-color: azure;
        flex: 1;
        overflow: auto;
        padding: 1rem;
    }

    #pyodide-container {
        flex: 1;
        overflow: auto;
        --size: 1.5;
        --color: rgba(255, 255, 255, 0.8);
    }

    @media (max-width: 768px) {
        #container {
            flex-direction: column;
        }
    }

    #content > :not(:first-child) {
        font-size: 1.5em;
    }
</style>

<%= render(@challenge_id <> ".html") %>

<script type="text/javascript">
      function sleep(s) {
        return new Promise((resolve) => setTimeout(resolve, s));
      }

      function prism_format(code) {
        code = $.terminal.escape_brackets(code);
        code = $.terminal.prism("python", code);
        return code;
      }

      async function main() {
        let term;
        globalThis.pyodide = await loadPyodide({
          stdin: () => {
            let result = prompt();
            echo(result);
            return result;
          },
        });
        let namespace = pyodide.globals.get("dict")();
        await pyodide.loadPackage("micropip");
        initialize(pyodide);
        pyodide.runPython(
          `
            import sys
            from pyodide import to_js
            from pyodide.console import PyodideConsole, repr_shorten, BANNER
            import __main__
            BANNER = "Welcome to the Python Challenge Interpreter 🐍\\n" + BANNER
            pyconsole = PyodideConsole(__main__.__dict__)
            import builtins
            async def await_fut(fut):
              res = await fut
              if res is not None:
                builtins._ = res
              return to_js([res], depth=1)
            def clear_console():
              pyconsole.buffer = []
        `,
          { globals: namespace }
        );
        let repr_shorten = namespace.get("repr_shorten");
        let banner = namespace.get("BANNER");
        let await_fut = namespace.get("await_fut");
        let pyconsole = namespace.get("pyconsole");
        let clear_console = namespace.get("clear_console");
        const echo = (msg, ...opts) => {
          term.echo(prism_format(msg).replace("]]", "&rsqb;&rsqb;"), {
            finalize: (node) => (node[0].style.marginLeft = "0ch"),
          });
        };
        namespace.destroy();

        let ps1 = ">>> ",
          ps2 = "... ";

        async function lock() {
          let resolve;
          let ready = term.ready;
          term.ready = new Promise((res) => (resolve = res));
          await ready;
          return resolve;
        }

        async function interpreter(command) {
          let unlock = await lock();
          term.pause();
          // multiline should be split (useful when pasting)
          for (const c of command.split("\n")) {
            let fut = pyconsole.push(c);
            term.set_prompt(fut.syntax_check === "incomplete" ? ps2 : ps1);
            switch (fut.syntax_check) {
              case "syntax-error":
                term.error(fut.formatted_error.trimEnd());
                continue;
              case "incomplete":
                continue;
              case "complete":
                break;
              default:
                throw new Error(`Unexpected type ${ty}`);
            }
            // In JavaScript, await automatically also awaits any results of
            // awaits, so if an async function returns a future, it will await
            // the inner future too. This is not what we want so we
            // temporarily put it into a list to protect it.
            let wrapped = await_fut(fut);
            // complete case, get result / error and print it.
            try {
              let [value] = await wrapped;
              if (value !== undefined) {
                echo(
                  repr_shorten.callKwargs(value, {
                    separator: "\n...<long output truncated>...\n",
                  })
                );
              }
              if (pyodide.isPyProxy(value)) {
                value.destroy();
              }
            } catch (e) {
              if (e.constructor.name === "PythonError") {
                const message = fut.formatted_error || e.message;
                term.error(message.trimEnd());
              } else {
                throw e;
              }
            } finally {
              fut.destroy();
              wrapped.destroy();
            }
          }
          term.resume();
          await sleep(10);
          unlock();
        }

        term = $("#pyodide-container").terminal(interpreter, {
          greetings: banner,
          prompt: ps1,
          completionEscape: false,
          completion: function (command, callback) {
            callback(pyconsole.complete(command).toJs()[0]);
          },
          keymap: {
            "CTRL+C": async function (event, original) {
              clear_console();
              term.enter();
              echo("KeyboardInterrupt");
              term.set_command("");
              term.set_prompt(ps1);
            },
            TAB: (event, original) => {
              const command = term.before_cursor();
              // Disable completion for whitespaces.
              if (command.trim() === "") {
                term.insert("\t");
                return false;
              }
              return original(event);
            },
          },
        });
        window.term = term;
        pyconsole.stdout_callback = (s) => echo(s, { newline: false });
        pyconsole.stderr_callback = (s) => {
          term.error(s.trimEnd());
        };
        term.ready = Promise.resolve();
        pyodide._api.on_fatal = async (e) => {
          term.error(
            "Pyodide has suffered a fatal error. Please report this to the Pyodide maintainers."
          );
          term.error("The cause of the fatal error was:");
          term.error(e);
          term.error("Look in the browser console for more details.");
          await term.ready;
          term.pause();
          await sleep(15);
          term.pause();
        };
      }

      $.terminal.defaults.formatters.push($.terminal.prism.bind(null, "python"));
      window.console_ready = main();
</script>

<div id="container">
    <div id="question-panel">
        <div id="content"></div>
        <form id="form" method="post" action={Routes.challenge_path(@conn, :submit)}>
            <input
                type="text"
                id="input"
                placeholder="Type your answer here"
                autofocus
                autocomplete="off"
                spellcheck="false"
                name="solution"
            />
            <input
                type="hidden"
                name="_csrf_token"
                value={get_csrf_token()}
            />
            <p class="hidden incorrect">!! Incorrect Answer !!</p>
            <button
                id="submit"
                type="submit"
            >
                Submit
            </button>
        </form>
    </div>
    <div id="pyodide-container"></div>
</div>
